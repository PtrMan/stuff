#include "Rf12.h"

#include "delay.h"

unsigned char Rf12::hamminge[16]={0x15,0x02,0x49,0x5E,0x64,0x73,0x38,0x2F,0xD0,0xC7,0x8C,0x9B,0xA1,0xB6,0xFD,0xEA};
unsigned char Rf12::hammingd[256]={
0x01,0x00,0x01,0x01,0x00,0x00,0x01,0x01,0x02,0x02,0x01,0x03,0x0A,0x02,0x03,0x07,
0x00,0x00,0x01,0x01,0x00,0x00,0x01,0x00,0x06,0x02,0x03,0x0B,0x02,0x00,0x03,0x03,
0x04,0x0C,0x01,0x05,0x04,0x04,0x05,0x07,0x06,0x06,0x07,0x07,0x06,0x07,0x07,0x07,
0x06,0x04,0x05,0x05,0x04,0x00,0x0D,0x05,0x06,0x06,0x06,0x07,0x06,0x06,0x07,0x07,
0x00,0x02,0x01,0x01,0x04,0x00,0x01,0x09,0x02,0x02,0x03,0x02,0x02,0x02,0x03,0x03,
0x08,0x00,0x01,0x05,0x00,0x00,0x03,0x01,0x02,0x02,0x03,0x03,0x03,0x02,0x03,0x03,
0x04,0x04,0x05,0x05,0x04,0x04,0x04,0x05,0x06,0x02,0x0F,0x07,0x04,0x06,0x07,0x07,
0x04,0x05,0x05,0x05,0x04,0x04,0x05,0x05,0x06,0x06,0x07,0x05,0x06,0x0E,0x03,0x07,
0x08,0x0C,0x01,0x09,0x0A,0x08,0x09,0x09,0x0A,0x0A,0x0B,0x0B,0x0A,0x0A,0x0A,0x0B,
0x08,0x08,0x09,0x0B,0x08,0x00,0x0D,0x09,0x0A,0x0B,0x0B,0x0B,0x0A,0x0A,0x0B,0x0B,
0x0C,0x0C,0x0D,0x0C,0x0C,0x0C,0x0D,0x0D,0x0E,0x0C,0x0F,0x0F,0x0A,0x0E,0x0F,0x07,
0x0C,0x0C,0x0D,0x0D,0x0D,0x0C,0x0D,0x0D,0x06,0x0E,0x0F,0x0B,0x0E,0x0E,0x0D,0x0F,
0x08,0x08,0x09,0x09,0x08,0x09,0x09,0x09,0x0A,0x02,0x0F,0x0B,0x0A,0x0A,0x0B,0x09,
0x08,0x08,0x08,0x09,0x08,0x08,0x09,0x09,0x08,0x0A,0x0B,0x0B,0x0A,0x0E,0x03,0x0B,
0x0C,0x0C,0x0F,0x0D,0x04,0x0C,0x0D,0x09,0x0F,0x0E,0x0F,0x0F,0x0E,0x0E,0x0F,0x0F,
0x08,0x0C,0x0D,0x05,0x0C,0x0E,0x0D,0x0D,0x0E,0x0E,0x0F,0x0F,0x0E,0x0E,0x0F,0x0E};

unsigned Rf12::transmit(unsigned short Value)
{
   unsigned short ValueI;
   unsigned i;

   ValueI = 0;

   this->CsPin->setValue(false);

   for( i = 0; i < 16; i++ )
   {
      this->SdiPin->setValue( Value & (1 << 15) );

      ValueI <<= 1;

      if( this->SdoPin->getValue() )
      {
         ValueI |= 1;
      }

      this->ClkPin->setValue(true);

      Value <<= 1;

      delayUs(1); //delay_us(0.3f);
      this->ClkPin->setValue(false);
   }

   this->CsPin->setValue(true);

   return ValueI;
}

void Rf12::init(AbstractPin *SdoPin, AbstractPin *SdiPin, AbstractPin *ClkPin, AbstractPin *CsPin)
{
   unsigned i;

   this->SdoPin = SdoPin;
   this->SdiPin = SdiPin;
   this->ClkPin = ClkPin;
   this->CsPin  = CsPin;
/*
   unsigned char hamminge2[16]={0x15,0x02,0x49,0x5E,0x64,0x73,0x38,0x2F,0xD0,0xC7,0x8C,0x9B,0xA1,0xB6,0xFD,0xEA};
   unsigned char hammingd2[256]={
0x01,0x00,0x01,0x01,0x00,0x00,0x01,0x01,0x02,0x02,0x01,0x03,0x0A,0x02,0x03,0x07,
0x00,0x00,0x01,0x01,0x00,0x00,0x01,0x00,0x06,0x02,0x03,0x0B,0x02,0x00,0x03,0x03,
0x04,0x0C,0x01,0x05,0x04,0x04,0x05,0x07,0x06,0x06,0x07,0x07,0x06,0x07,0x07,0x07,
0x06,0x04,0x05,0x05,0x04,0x00,0x0D,0x05,0x06,0x06,0x06,0x07,0x06,0x06,0x07,0x07,
0x00,0x02,0x01,0x01,0x04,0x00,0x01,0x09,0x02,0x02,0x03,0x02,0x02,0x02,0x03,0x03,
0x08,0x00,0x01,0x05,0x00,0x00,0x03,0x01,0x02,0x02,0x03,0x03,0x03,0x02,0x03,0x03,
0x04,0x04,0x05,0x05,0x04,0x04,0x04,0x05,0x06,0x02,0x0F,0x07,0x04,0x06,0x07,0x07,
0x04,0x05,0x05,0x05,0x04,0x04,0x05,0x05,0x06,0x06,0x07,0x05,0x06,0x0E,0x03,0x07,
0x08,0x0C,0x01,0x09,0x0A,0x08,0x09,0x09,0x0A,0x0A,0x0B,0x0B,0x0A,0x0A,0x0A,0x0B,
0x08,0x08,0x09,0x0B,0x08,0x00,0x0D,0x09,0x0A,0x0B,0x0B,0x0B,0x0A,0x0A,0x0B,0x0B,
0x0C,0x0C,0x0D,0x0C,0x0C,0x0C,0x0D,0x0D,0x0E,0x0C,0x0F,0x0F,0x0A,0x0E,0x0F,0x07,
0x0C,0x0C,0x0D,0x0D,0x0D,0x0C,0x0D,0x0D,0x06,0x0E,0x0F,0x0B,0x0E,0x0E,0x0D,0x0F,
0x08,0x08,0x09,0x09,0x08,0x09,0x09,0x09,0x0A,0x02,0x0F,0x0B,0x0A,0x0A,0x0B,0x09,
0x08,0x08,0x08,0x09,0x08,0x08,0x09,0x09,0x08,0x0A,0x0B,0x0B,0x0A,0x0E,0x03,0x0B,
0x0C,0x0C,0x0F,0x0D,0x04,0x0C,0x0D,0x09,0x0F,0x0E,0x0F,0x0F,0x0E,0x0E,0x0F,0x0F,
0x08,0x0C,0x0D,0x05,0x0C,0x0E,0x0D,0x0D,0x0E,0x0E,0x0F,0x0F,0x0E,0x0E,0x0F,0x0E};

   for( i = 0; i < 16; i++ )
   {
      Rf12::hamminge[i] = hamminge2[i];
   }

   for( i = 0; i < 256; i++ )
   {
      Rf12::hammingd[i] = hammingd2[i];
   }*/

   // TODO< port stuff >




   delayMs(100); // wait until POR done

   this->transmit(0xC0E0); // AVR CLK: 10 MHz

   //ifdef FREQ433
   this->transmit(0x80D7); // Enable FIFO
   //#elif defined FREQ868
   //Rf12::transmit(0x80E7); //868MHz, EL, EF, 11.5pF
   //#endif

   this->transmit(0xC2AB);        // Data Filter: internal
   this->transmit(0xCA81);        // Set FIFO mode
   this->transmit(0xE000);        // disable wakeuptimer
   this->transmit(0xC800);        // disable low duty cycle
   this->transmit(0xC4F7);        // AFC settings: autotuning: -10kHz...+7,5kHz
   this->transmit(0x0000);        // receive status
}

void Rf12::setbandwidth(unsigned Bandwidth, unsigned Gain, unsigned Drssi)
{
   this->transmit(0x9400|((Bandwidth&7)<<5)|((Gain&3)<<3)|(Drssi&7));
}

void Rf12::setfreq(unsigned Freq)
{  if (Freq<96)            // 430,2400MHz
      Freq=96;
   else if (Freq>3903)        // 439,7575MHz
      Freq=3903;
   this->transmit(0xA000|Freq);
}


void Rf12::setbaud(unsigned Baud)
{
   if (Baud<663)
      return;
   if (Baud<5400)             // Baudrate= 344827,58621/(R+1)/(1+CS*7)
      this->transmit(0xC680|((43104/Baud)-1));
   else
      this->transmit(0xC600|((344828UL/Baud)-1));
}

void Rf12::setpower(unsigned Power, unsigned Mod)
{  
   this->transmit(0x9800|(Power&7)|((Mod&15)<<4));
}

void Rf12::ready(unsigned Sending)
{
   // with timeout
   if( Sending )
   {
      unsigned Timeout = 1000;  
      
      this->SdiPin->setValue(false);
      this->CsPin->setValue(false);

      // nop
      while( (!this->SdoPin->getValue()) && Timeout ) // wait until FIFO ready
      {
         Timeout--;
         delayUs(10);
      }
   }
   else
   {
      this->CsPin->setValue(false);
      while( !this->SdoPin->getValue() ); // wait until FIFO ready
   }
}


void Rf12::txdata(unsigned char *Data, unsigned Count)
{
   unsigned i;

   this->transmit(0x8208);        // turn on crystal
   this->transmit(0x0000);        // receive status
   this->transmit(0x0000);        // receive status    

   this->transmit(0x8238);        // TX on
   this->ready(1);
   this->transmit(0xB8AA);
   this->ready(1);
   this->transmit(0xB8AA);
   this->ready(1);
   this->transmit(0xB8AA);
   this->ready(1);
   this->transmit(0xB82D);
   this->ready(1);
   this->transmit(0xB8D4);

   for( i = 0; i < Count; i++ )
   {
      this->ready(1);
      //#ifdef HAMMING_CODE  
      this->transmit(0xB800|(hamminge[*Data/16])); //high-byte(*data++));
      this->ready(1);
      this->transmit(0xB800|(hamminge[*Data&15])); //low-byte
      Data++;
      //#else
      //this->transmit(0xB800|(*data++));
      //#endif
   }
   this->ready(1);
   delayMs(10);
   this->transmit(0x8208);        // TX off
   this->transmit(0x8201);        // enter sleep
}


void Rf12::rxdata(unsigned char *Data, unsigned Count)
{
   unsigned i;
   this->transmit(0x82C8);        // RX on
   this->transmit(0xCA81);        // set FIFO mode
   this->transmit(0xCA83);        // enable FIFO
   for( i = 0; i < Count; i++ )
   {  
      this->ready(0);
      //#ifdef HAMMING_CODE
         *Data =hammingd[this->transmit(0xB000)&255] << 4;
         this->ready(0);
         *Data|=hammingd[this->transmit(0xB000)&255];
         Data++;
      //#else
      //   *data++ = this->transmit(0xB000);
      //#endif
   }
   this->transmit(0x8208);        // RX off
}
